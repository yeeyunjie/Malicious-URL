# import libraries
import warnings
import pandas as pd
import matplotlib.pyplot as plt
import matplotlib
import numpy as np
import streamlit as st
import seaborn as sns
import pickle
import re
from malicious_functions import *

from tld import get_tld
from sklearn.preprocessing import MinMaxScaler
from sklearn.metrics import mean_squared_error
from sklearn.linear_model import LogisticRegression, Ridge, Lasso,ElasticNet,HuberRegressor,PassiveAggressiveRegressor,SGDRegressor
from sklearn.pipeline import Pipeline
from sklearn.tree import DecisionTreeRegressor,ExtraTreeRegressor
from sklearn.neighbors import KNeighborsClassifier
from sklearn.svm import SVR
from sklearn.ensemble import AdaBoostRegressor,BaggingRegressor,RandomForestRegressor,ExtraTreesRegressor,GradientBoostingRegressor
from sklearn.model_selection import train_test_split,GridSearchCV,cross_val_score
from sklearn.preprocessing import StandardScaler, LabelEncoder
from sklearn.feature_extraction.text import CountVectorizer, TfidfVectorizer
from nltk.tokenize import RegexpTokenizer
from catboost import CatBoostClassifier


matplotlib.use("Agg")
pd.set_option('display.float_format', lambda x: '%.3f' % x)
warnings.filterwarnings("ignore")
st.set_option('deprecation.showPyplotGlobalUse', False)


# Create containers:
header = st.container()
intro = st.container()
model_training = st.container()
data_vis = st.container()
features = st.container()

# with open("style.css") as f:    
# 	st.markdown(f'<style>{f.read()}</style>',unsafe_allow_html = True)

with header:
	st.title("Fall in love, not for scams")
	st.write("""In this project, I hope to create a model that is able to distinguish malicious URLs 
from the benign ones. Surf safe! """)

with intro:
	st.header("Introduction")
	st.write("""Cyberattacks are becoming increasingly common thus my intention is to train a model that recognizes distinguishable 
features/characterisitics of URLs to understand what makes them dangerous or safe. 
This dataset is available on Kaggle (malicious-urls-dataset) 
and it contains URLs that fall under the 4 categories (& a brief explanation of each):""")

	st.write("**Benign** - Safe sites")
	st.write("**Defacement** - Hackers change the content of a website to convey such kind of message(religious/political etc), analogous to an online graffiti")
	st.write("**Phishing** - Impersonating as a trusted website in an attempt to steal your information")
	st.write("**Malware** - Similar to a virus that takes over your device""")

	# st.subheader("Dissecting the URL:")
	# st.write("The URL is made up of 4 main parts:")

	df = pd.read_csv('data/malicious_phish.csv',encoding='utf8')

with model_training:
	pickle_in = open('cbc_classifier.pkl', 'rb') 
	cbc_classifier = pickle.load(pickle_in)

	
	st.header("Lets test the model!")
	user_input = st.text_input("Full URl: ", "eg. www.google.com")


	if st.button("Predict"):
		clean_user_input = clean_input(user_input)
		predict = cbc_classifier.predict(clean_user_input)

		if predict[0][0] == 'benign':
			st.markdown("<h1 style='text-align: center; color: #41A40C; font-size: 30px; background-color: #C1F0A8'>Its safe :) </h1>",unsafe_allow_html=True)


		else:
			st.markdown("<h1 style='text-align: center; color: #B6463C; font-size: 30px; background-color: #EFAFA9'>Its harmful ):< </h1>",unsafe_allow_html=True)


		# st.write(predict[0][0])
	


with data_vis:
	st.header("Data Visualization")
	with st.expander("See more"):
     
		st.subheader("Distribution of data")

		fig,ax = plt.subplots(figsize = (11,4))
		sns.countplot(df.type, palette = 'Set2')
		ax.set_title('Different types of websites');
		st.pyplot()
		st.subheader("Isolating all TLDs")

		# sel_col, disp_col = st.columns()
		selected_class = st.selectbox("Pick a category: ",("Benign","Defacement","Phishing","Malware","All of them"))
		# st.write('You selected:', selected_class)



		### Segmenting data into different categories
		# get all tlds & make a new feature 
		tlds = []
		for url in df.url:
			try: 
				tlds.append(get_tld(url, fix_protocol = True))
			except:
				tlds.append(np.nan)

		# merging into 1 dataframe
		new_df = pd.concat([df,pd.DataFrame(tlds)],axis = 1).rename(columns = {0:'tlds'})

		# viewing frequently occurring tld for each category
		fig,ax = plt.subplots(figsize = (10,4))

		benign_only = new_df[new_df.type == 'benign'].tlds.value_counts(normalize = True)
		phishing_only = new_df[new_df.type == 'phishing'].tlds.value_counts(normalize = True)
		defacement_only = new_df[new_df.type == 'defacement'].tlds.value_counts(normalize = True)
		malware_only = new_df[new_df.type == 'malware'].tlds.value_counts(normalize = True)
		
		
		if selected_class == "Benign":
			sns.barplot(x = benign_only[1:11].index,y = benign_only[1:11].values, palette = 'Set2')
			ax.set_xlabel('Top Level Domains (TLDs)',fontsize = 11)
			ax.set_ylabel('Percentage / %',fontsize = 11)
			ax.set_title("Distribution of Benign TLDs",fontsize = 14)
			st.set_option('deprecation.showPyplotGlobalUse', False)
			st.pyplot()
		elif selected_class == "Defacement":
			sns.barplot(x = defacement_only[1:11].index,y = defacement_only[1:11].values, palette = 'Set2')
			ax.set_xlabel('Top Level Domains (TLDs)',fontsize = 11)
			ax.set_ylabel('Percentage / %',fontsize = 11)
			ax.set_title("Distribution of Defacement TLDs",fontsize = 14)
			st.set_option('deprecation.showPyplotGlobalUse', False)
			st.pyplot()
		elif selected_class == "Phishing":
			sns.barplot(x = phishing_only[:1:11].index,y = phishing_only[1:11].values, palette = 'Set2')
			ax.set_xlabel('Top Level Domains (TLDs)',fontsize = 11)
			ax.set_ylabel('Percentage / %',fontsize = 11)
			ax.set_title("Distribution of Phishing TLDs",fontsize = 14)
			st.set_option('deprecation.showPyplotGlobalUse', False)
			st.pyplot()
		elif selected_class == "Malware":
			sns.barplot(x = malware_only[1:11].index,y = malware_only[1:11].values, palette = 'Set2')
			ax.set_xlabel('Top Level Domains (TLDs)',fontsize = 11)
			ax.set_ylabel('Percentage / %',fontsize = 11)
			ax.set_title("Distribution of Malware TLDs",fontsize = 14)
			st.set_option('deprecation.showPyplotGlobalUse', False)
			st.pyplot()

		elif selected_class == "All of them":
			fig,ax = plt.subplots(2,2, figsize = (18,11))
			sns.barplot(x = benign_only[1:11].index,y = benign_only[1:11].values, palette = 'Set2', ax = ax[0,0])
			ax[0,0].set_xlabel('Benign TLDs',fontsize = 11)
			ax[0,0].set_ylabel('Percentage / %',fontsize = 11)

			sns.barplot(x = phishing_only[1:11].index,y = phishing_only[1:11].values, palette = 'Set2', ax = ax[0,1])
			ax[0,1].set_xlabel('Phishing TLDs',fontsize = 11)
			ax[0,1].set_ylabel('Percentage / %',fontsize = 11)

			sns.barplot(x = defacement_only[1:11].index,y = defacement_only[1:11].values, palette = 'Set2', ax = ax[1,0])
			ax[1,0].set_xlabel('Defacement TLDs',fontsize = 11)
			ax[1,0].set_ylabel('Percentage / %',fontsize = 11)

			sns.barplot(x = malware_only[1:11].index,y = malware_only[1:11].values, palette = 'Set2', ax = ax[1,1])
			ax[1,1].set_xlabel('Malware TLDs',fontsize = 11)
			ax[1,1].set_ylabel('Percentage / %',fontsize = 11)

			fig.suptitle('Top 10 TLDs in each category',fontsize = 20);
			st.set_option('deprecation.showPyplotGlobalUse', False)
			st.pyplot()


		# else:
		# 	st.write("ok chill")


		st.subheader("Isolating available country codes")


		# getting country codes from TLDs
		new_df['countries'] = new_df['tlds'][~new_df['tlds'].isnull()].str.split('.').apply(lambda x: x[-1] if len(x[-1]) == 2 else np.nan)

		# viewing frequently occurring countries for each category
		fig,ax = plt.subplots(2,2, figsize = (18,11))
		benign_only = new_df[new_df.type == 'benign'].countries.value_counts(normalize = True)
		sns.barplot(x = benign_only[1:11].index,y = benign_only[1:11].values, palette = 'Set2', ax = ax[0,0])
		ax[0,0].set_xlabel('Benign countries',fontsize = 11)
		ax[0,0].set_ylabel('Percentage / %',fontsize = 11)

		phishing_only = new_df[new_df.type == 'phishing'].countries.value_counts(normalize = True)
		sns.barplot(x = phishing_only[1:11].index,y = phishing_only[1:11].values, palette = 'Set2', ax = ax[0,1])
		ax[0,1].set_xlabel('Phishing countries',fontsize = 11)
		ax[0,1].set_ylabel('Percentage / %',fontsize = 11)

		defacement_only = new_df[new_df.type == 'defacement'].countries.value_counts(normalize = True)
		sns.barplot(x = defacement_only[1:11].index,y = defacement_only[1:11].values, palette = 'Set2', ax = ax[1,0])
		ax[1,0].set_xlabel('Defacement countries',fontsize = 11)
		ax[1,0].set_ylabel('Percentage / %',fontsize = 11)

		malware_only = new_df[new_df.type == 'malware'].countries.value_counts(normalize = True)
		sns.barplot(x = malware_only[1:11].index,y = malware_only[1:11].values, palette = 'Set2', ax = ax[1,1])
		ax[1,1].set_xlabel('Malware countries',fontsize = 11)
		ax[1,1].set_ylabel('Percentage / %',fontsize = 11)

		fig.suptitle('Top 10 countries for each category',fontsize = 20);
		st.set_option('deprecation.showPyplotGlobalUse', False)
		st.pyplot()

	with st.expander("Interesting takeaways: "):
		st.markdown("*_.org_*")
		st.write("phishing urls seem to leverage on this recognized TLD")
		st.markdown("_.country_")
		st.markdown("""`.de` & `.bl` are common in defacements while `.jp` is common in malwares """)
		st.markdown("*_.com_*")
		st.markdown("""As `.com` was the top occurring TLD in all categories, it was removed """)



	 



# with features:
# 	st.header("Features")

 	

# 	sel_col, disp_col  = st.columns(2)



